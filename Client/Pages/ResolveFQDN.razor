@page "/resolvefqdn"
@inject IAPIService ApiService

<PageTitle>Resolve FQDN</PageTitle>

<MudPaper Elevation="0" Class="pa-4" Style="width:50%">
    <MudText Typo="Typo.h2">Resolve FQDNr</MudText>
    <MudText Typo="Typo.body1">This tool can be used to check an FQDN resolution.</MudText>
    <MudDivider />
    <MudGrid Justify="Justify.Center" Class="mx-2 px-4 my-2 py-2">
        <MudForm>
            <MudItem xs="6" sm="6" md="6" lg="6" xl="6">
                <MudTextField @bind-Value="fqdnName" Label="Enter FQDN to resolve" For="@(() => fqdnName)" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6" lg="6" xl="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FetchData">Resolve</MudButton>
            </MudItem>
        </MudForm>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
            <MudTextField T="string" Label="Response" Text="@jsonData" Lines="12"></MudTextField>
        </MudItem>
    </MudGrid>
</MudPaper>
@code {
    private string fqdnName;
    private string jsonData;
    private async Task FetchData(){
        if (!string.IsNullOrEmpty(fqdnName))
        {
            try
            {
                var response = await ApiService.GetDNSLookup(fqdnName);
                jsonData = $"HostName:\t{response.HostName}\n\nAddresses:\t{String.Join("\n\t", response.AddressList)}";
                foreach (var record in response.Records)
                {
                    jsonData += $"\nRecord Type:\t{RecordTypeNames.GetValueOrDefault(record.RecordType)}\t\tRecord Class:\t{record.RecordClass}\t\tTTL:\t\t{record.TimeToLive}\t\tRecord Data:\t{record.DomainName.Value}";
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            FetchData();
    }

    public static readonly Dictionary<int, string> RecordTypeNames = new Dictionary<int, string>
        {
        { 1, "A" },          // Address record
        { 2, "NS" },         // Name server record
        { 5, "CNAME" },      // Canonical name record
        { 6, "SOA" },        // Start of authority record
        { 12, "PTR" },       // Pointer record
        { 13, "HINFO" },     // Host Information record
        { 15, "MX" },        // Mail exchange record
        { 16, "TXT" },       // Text record
        { 28, "AAAA" },      // IPv6 address record
        { 33, "SRV" },       // Service locator
        { 35, "NAPTR" },     // Naming authority pointer
        { 36, "KX" },        // Key exchange record
        { 37, "CERT" },      // Certificate record
        { 39, "DNAME" },     // Delegation name record
        { 43, "DS" },        // Delegation signer
        { 44, "SSHFP" },     // SSH public key fingerprint
        { 45, "IPSECKEY" },  // IPsec key
        { 46, "RRSIG" },     // DNSSEC signature
        { 47, "NSEC" },      // Next secure record
        { 48, "DNSKEY" },    // DNS key record
        { 49, "DHCID" },     // DHCP identifier
        { 50, "NSEC3" },     // Next secure record version 3
        { 51, "NSEC3PARAM" },// NSEC3 parameters
        { 52, "TLSA" },      // TLSA certificate association
        { 53, "SMIMEA" },    // S/MIME certificate association
        { 55, "HIP" },       // Host identity protocol
        { 59, "CDS" },       // Child DS
        { 60, "CDNSKEY" },   // Child DNSKEY
        { 61, "OPENPGPKEY" },// OpenPGP public key
        { 62, "CSYNC" },     // Child-to-parent synchronization
        { 63, "ZONEMD" },    // Message digest for DNS zones
        { 99, "SPF" },       // Sender policy framework
        { 108, "EUI48" },    // MAC address (EUI-48)
        { 109, "EUI64" },    // MAC address (EUI-64)
        { 249, "TKEY" },     // Transaction key
        { 250, "TSIG" },     // Transaction signature
        { 256, "URI" },      // Uniform resource identifier
        { 257, "CAA" },      // Certification authority authorization
        { 32768, "TA" },     // DNSSEC trust authorities
        { 32769, "DLV" }     // DNSSEC lookaside validation
    };
}
